@using System.Diagnostics
@using BlazorKanban.Client.Services

@implements IDisposable;
@inject DragDropService DragDropService;

@code {

    private int _id { get; set; }

    protected override void OnInitialized()
    {

        if (Dropzone == null) throw new InvalidOperationException("Draggables must be inside a dropzone. Put a <dropzone> </dropzone> tag around them.");

        _id = DragDropService.GetDraggableId();

        var dataItem = new DraggableProperty(DragDropService)
        {
            Id = _id,
            RenderFragment = ChildContent,
            Tag = Tag,
            AllowDrag = AllowDrag,
            Name = Name,
            OnDrop = OnDrop,
            OtherAttributes = AllOtherAttributes
        };

        Dropzone.RegisterDraggable(dataItem);

        DragDropService.StateHasChanged += StateHasChangedHandler;

    }

    private async void StateHasChangedHandler()
    {
        await InvokeAsync(() => StateHasChanged());
    }

    [Parameter]
    public RenderFragment<DraggableProperty> ChildContent { get; set; }

    [CascadingParameter] 
    Dropzone Dropzone { get; set; }

    [Parameter]
    public dynamic Tag { get; set; }

    [Parameter]
    public Action<DraggableProperty> OnDrop { get; set; }

    /// <summary>
    /// Allows to pass a delegate which determines if element can be dragged
    /// </summary>
    [Parameter]
    public Func<DraggableProperty, bool> AllowDrag { get; set; }

    /// <summary>
    /// Get or sets a name for this draggable
    /// </summary>
    [Parameter]
    public string Name { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> AllOtherAttributes { get; set; }

    public void Dispose()
    {
        DragDropService.StateHasChanged -= StateHasChangedHandler;
    }

}