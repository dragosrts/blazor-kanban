@using System.Diagnostics;
@using Microsoft.Extensions.Logging;
@using BlazorKanban.Client.Services

@inject ILogger<Dropzone> Logger;
@implements IDisposable;
@inject DragDropService DragDropService;

<div ondragover="event.preventDefault();"
     ondragenter="event.preventDefault();"
     ondragstart="event.dataTransfer.setData('text', event.target.id);"
     @ondrop="Ondrop"
     @ondrop:preventDefault
     class="@_DropzoneClass">

    <CascadingValue Value="this">
        @ChildContent
    </CascadingValue>
    @{
        if (DragDropService.HasDropzoneDraggables(_dropzoneId))
        {
            @if (DragDropService.EnableDebug)
            {
                <p>render draggable(s) inside dropzone @_dropzoneId</p>
            }

            foreach (var frag in DragDropService.GetDraggablesForDropzone(_dropzoneId))
            {
                if (AllowDrag(frag.Id)) // allow dragging
                {
                    <div draggable="true" 
                         @key="frag" 
                         @ondragstart="()=>OnDragStart(frag.Id)"
                         @ondragenter="(e)=>OnDragEnter(frag.Id,e)"
                         @ondragleave="(e)=>OnDragLeave(frag.Id,e)"
                         @ondragend="() =>OnDragEnd(frag.Id)"
                         @attributes="frag.OtherAttributes"
                         class=@GetClasses(frag)>

                        @if (DragDropService.EnableDebug)
                        {
                            <p>@frag.Id</p>
                        }

                        <div class="@GetNoPointerClass(frag.Id)">
                            <CascadingValue Value="frag">
                                @frag.RenderFragment(frag)
                            </CascadingValue>
                        </div>
                    </div>
                }
                else // not allowing dragging
                {
                    <div @attributes="frag.OtherAttributes" class=@GetClasses(frag)>
                        <CascadingValue Value="frag">
                            @frag.RenderFragment(frag)
                        </CascadingValue>
                    </div>
                }
            }
        }
    }

</div>


@code {

    private int _dropzoneId { get; set; }

    private int _currentDraggedOverId;

    /// <summary>
    /// Maximum Number of items which can be dropped in this dropzone. Defaults to null which means unlimited.
    /// </summary>
    [Parameter]
    public int? MaxItems { get; set; }

    /// <summary>
    /// Indicates if dropzone item can be swapped with an item from another dropzone once MaxItem has been reached.
    /// </summary>
    [Parameter]
    public bool AllowSwap { get; set; }


    /// <summary>
    /// Allows to pass a delegate which executes if something is dropped and decides if the item is accepted
    /// </summary>
    [Parameter]
    public Func<dynamic, bool> Accepts { get; set; }


    /// <summary>
    /// Gets or set css parameters for this component
    /// </summary>
    [Parameter]
    public string Class { get; set; } = "";

    /// <summary>
    /// Gets or set the name of this Dropzone
    /// </summary>
    [Parameter]
    public string Name { get; set; } = "";

    [Parameter]
    public RenderFragment ChildContent { get; set; }


    public int Id { get => _dropzoneId; }


    /// <summary>
    /// Registers a new draggable item for this dropzone
    /// </summary>
    public void RegisterDraggable(DraggableProperty dataItem)
    {
        dataItem.DropzoneId = _dropzoneId;

        DragDropService.RegisterDraggableForDropzone(dataItem);
    }

    /// <summary>
    /// Get all draggable items for this dropzone
    /// </summary>
    /// <returns>List of Draggable Items</returns>
    public List<DraggableProperty> GetDraggables()
    {
        return DragDropService.GetDraggablesForDropzone(_dropzoneId);
    }


    private string fixedDropzoneClass = "dropzone rounded";

    private string _DropzoneClass
    {
        get
        {
            return $"{fixedDropzoneClass} {Class}";
        }
    }

    private bool AllowDrag(int draggableId)
    {
        var draggedItem = DragDropService.GetDraggablesForDropzone(_dropzoneId).Single(x => x.Id == draggableId);

        if (draggedItem.AllowDrag != null)
        {
            return draggedItem.AllowDrag(draggedItem);
        }
        else
        {
            return true;
        }

    }


    private string GetNoPointerClass(int draggableId)
    {
        if (_currentDraggedOverId == draggableId)
        {
            return "dd-no-pointer-events";
        }
        else
        {
            return string.Empty;
        }
    }

    private string GetClasses(DraggableProperty draggableItem)
    {
        var draggableId = draggableItem.Id;

        string cssPart = string.Empty;

        if (DragDropService.ActiveItem?.Id == draggableId)
        {
            cssPart = "draggable-intransit";
        }

        if (draggableId == _currentDraggedOverId)
        {
            cssPart = "draggable-over";
        }

        if (!AllowDrag(draggableId))
        {
            cssPart = "draggable-disabled";
        }

        if (draggableItem.OtherAttributes != null && draggableItem.OtherAttributes.ContainsKey("class"))
        {
            if (String.IsNullOrEmpty(cssPart))
            {
                cssPart = draggableItem.OtherAttributes["class"].ToString();
            }
            else
            {
                cssPart = cssPart + " " + draggableItem.OtherAttributes["class"].ToString();
            }
        }


        return $"draggable {cssPart}";
    }

    private void OnDragStart(int draggableId)
    {

        var dragedItem = DragDropService.GetDraggablesForDropzone(_dropzoneId).Single(x => x.Id == draggableId);

        if (!DragDropService.IsDraggable(dragedItem)) return;

        DragDropService.SupressRendering = true;

        dragedItem.OriginDropzoneId = _dropzoneId;

        DragDropService.SetActiveItem(_dropzoneId, draggableId);

        Logger.LogTrace($"{draggableId} is in transit (OnDragStart)");

    }

    private void OnDragEnd(int draggableId)
    {

        DragDropService.ActiveItem = null;

        DragDropService.SupressRendering = false;

        Logger.LogTrace($"{draggableId} not in in transit (OnDragEnd)");

    }

    private void OnDragLeave(int draggedOverId, DragEventArgs e)
    {
        if (draggedOverId == _currentDraggedOverId)
        {
            _currentDraggedOverId = 0;
        }
    }

    private void OnDragEnter(int draggedOverId, DragEventArgs e)
    {
        Logger.LogTrace($"OnDragEnter raised  by element with id {draggedOverId} - X: {e.ScreenX} Y: {e.ScreenY}");

        //no active item - probably something was dragged is not a draggable
        if (DragDropService.ActiveItem == null) return;

        //if same item return
        if (draggedOverId == DragDropService.ActiveItem.Id) return;

        _currentDraggedOverId = draggedOverId;

        DragDropService.SwapOrInsert(draggedOverId);

    }

    protected override void OnInitialized()
    {
        _dropzoneId = DragDropService.GetDropzoneId();

        var options = new DropzoneProperty()
        {
            Accepts = Accepts,
            MaxItems = MaxItems,
            AllowSwap = AllowSwap,
            Name = Name,
            DropzoneId = _dropzoneId
        };

        DragDropService.RegisterDropzone(_dropzoneId, options);

        DragDropService.StateHasChanged += StateHasChangedHandler;
    }

    private async void StateHasChangedHandler()
    {
        await InvokeAsync(() => StateHasChanged());
    }


    private void Ondrop()
    {
        _currentDraggedOverId = 0;

        //no active item - probably something was dragged is not a draggable
        if (DragDropService.ActiveItem == null) return;

        DragDropService.DropActiveItem(_dropzoneId);
    }


    protected override bool ShouldRender()
    {
        Logger.LogTrace($"Should Render {!DragDropService.SupressRendering} ActiveItem: {DragDropService.ActiveItem?.Id}");

        return !DragDropService.SupressRendering;
    }

    public void Dispose()
    {
        DragDropService.StateHasChanged -= StateHasChangedHandler;
        DragDropService.UnregisterDropzone(_dropzoneId);
    }

}
