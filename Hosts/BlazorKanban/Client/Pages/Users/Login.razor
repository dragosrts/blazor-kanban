@page "/login"
@layout LoginLayout
@inject NavigationManager navigationManager
@inject IdentityAuthenticationStateProvider authStateProvider

<MatCard>
    <div class="logo">
        <br />
        <h4>Log In</h4>
    </div>
    <EditForm Model="loginParameters" OnValidSubmit="SubmitLogin">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <fieldset>
            <div class="form-group">
                <MatTextField id="userName" @bind-Value="@loginParameters.UserName" Label="User Name" Icon="person" IconTrailing="true" FullWidth="true" Required="true" tabindex="1"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@loginParameters.Password" Label="Password" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password" tabindex="2"></MatTextField>
            </div>
            <div class="form-group">
                <MatButton class="float-right" Type="submit" Raised="true" tabindex="3">Login</MatButton>
                <MatCheckbox @bind-Value="@loginParameters.RememberMe" class="filled-in chk-col-blue">Remember Me</MatCheckbox>
            </div>
            <hr />
            <label class="text-danger">@error</label>
            <div>
                <MatButton class="float-left" OnClick="@Register" Raised="true">Create account</MatButton>
            </div>
        </fieldset>
    </EditForm>
</MatCard>

@code{
    LoginParameters loginParameters { get; set; } = new LoginParameters();
    string error { get; set; } = string.Empty;

    async Task OnSubmit()
    {
        error = string.Empty;
        try
        {
            await authStateProvider.Login(loginParameters);
            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    async Task SubmitLogin()
    {
        error = string.Empty;
        try
        {
            await authStateProvider.Login(loginParameters);
            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }

    void Register()
    {
        navigationManager.NavigateTo("/register");
    }
}