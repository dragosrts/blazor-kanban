@page "/register"
@layout LoginLayout
@inject NavigationManager navigationManager
@inject IdentityAuthenticationStateProvider authStateProvider

<MatCard>
    <div class="logo">
        <h4>Create Account</h4>
    </div>

    <EditForm Model="registerParameters" OnValidSubmit="RegisterUser">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <fieldset>
            <div class="form-group">
                <MatTextField @bind-Value="@registerParameters.UserName" Label="User Name" Icon="person" IconTrailing="true" FullWidth="true" Required="true"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@registerParameters.Password" Label="Password" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
            </div>
            <div class="form-group">
                <MatTextField @bind-Value="@registerParameters.PasswordConfirm" Label="Password Confirmation" Icon="lock_outline" IconTrailing="true" FullWidth="true" Required="true" Type="password"></MatTextField>
            </div>
            <div class="form-group d-flex justify-content-end">
                <MatButton Type="submit" Raised="true">Create account</MatButton>
            </div>
            <hr />
            <label class="text-danger">@error</label>
            <NavLink href="login">
                <h6 class="font-weight-normal text-center">Already have an account? Click here to login</h6>
            </NavLink>
        </fieldset>
    </EditForm>
</MatCard>

@code{

    RegisterParameters registerParameters { get; set; } = new RegisterParameters();
    string error { get; set; }

    async Task RegisterUser()
    {
        error = null;
        try
        {
            await authStateProvider.Register(registerParameters);
            navigationManager.NavigateTo("");
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
    }
}