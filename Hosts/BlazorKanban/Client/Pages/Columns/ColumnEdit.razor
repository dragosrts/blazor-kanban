@attribute [Authorize]
@page "/column/edit/{columnid}";
@inject HttpClient Http
@inject IMatToaster matToaster

<MatDialog @bind-IsOpen="@IsOpen">
    <EditForm Model="@ColumnModel" OnValidSubmit="SubmitForm">
        <MatDialogTitle>Edit column</MatDialogTitle>
        <p>
            <DataAnnotationsValidator />
            @*<ValidationSummary />*@
        </p>
        <MatDivider></MatDivider>
        <MatDialogContent>
            <p>
                <label for="column-title">Column Title</label>
                <MatTextField Id="column-title" @bind-Value="@ColumnModel.Title" FullWidth="true"></MatTextField>
                <ValidationMessage For="@(() => ColumnModel.Title)" />
            </p>
            <p>
                <label for="column-description">Column Description (optional)</label>
                <MatTextField Id="column-description" @bind-Value="@ColumnModel.Description" FullWidth="true" TextArea="true"></MatTextField>
            </p>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Type="button" Icon="delete_forever" OnClick="@(e => { IsOpenedSecondDialog = true; })" Style="color:darkred; margin-right: auto;">Delete</MatButton>
            <MatButton Type="submit">Save</MatButton>
            <MatButton Type="button" OnClick="Close">Cancel</MatButton>
        </MatDialogActions>
    </EditForm>
</MatDialog>
<MatDialog @bind-IsOpen="@IsOpenedSecondDialog">
    <MatDialogTitle>Delete Confirmation</MatDialogTitle>
    <MatDialogContent>
        <p>Are you sure you want to delete the @ColumnModel.Title and all it's components?</p>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(async () => await Delete(ColumnModel.Id))" Style="color:darkred;">Yes</MatButton>
        <MatButton OnClick="@(e => { IsOpenedSecondDialog = false; })">No</MatButton>
    </MatDialogActions>
</MatDialog>

@code  {
    [Parameter] public EventCallback OnSubmitCallback { get; set; }

    private BlazorKanban.Shared.Column ColumnModel { get; set; } = new Column();

    private bool IsOpen { get; set; } = false;
    private bool IsOpenedSecondDialog { get; set; } = false;

    public async Task Open(string columnId)
    {
        IsOpen = true;
        ColumnModel = await Http.GetFromJsonAsync<Column>($"api/tasklists/{columnId}");

        StateHasChanged();
    }

    private void Close()
    {
        IsOpenedSecondDialog = false;
        IsOpen = false;
        StateHasChanged();
    }

    private async Task Delete(string columnId)
    {
        var response = await Http.DeleteAsync($"api/tasklists/{columnId}");
        response.EnsureSuccessStatusCode();

        if (response.IsSuccessStatusCode)
        {
            matToaster.Add($"The \"{ColumnModel.Title}\" column has been deleted", MatToastType.Warning, "Delete");
        }
        else
        {
            matToaster.Add($"The \"{ColumnModel.Title}\" column could not be deleted", MatToastType.Danger, "Delete");
        }

        IsOpenedSecondDialog = false;
        IsOpen = false;
        await OnSubmitCallback.InvokeAsync(this);
    }

    private async Task SubmitForm()
    {
        var response = await Http.PutAsJsonAsync<BlazorKanban.Shared.Column>($"api/tasklists/{ColumnModel.Id}", ColumnModel);
        response.EnsureSuccessStatusCode();

        if (response.IsSuccessStatusCode)
        {
            matToaster.Add($"The \"{ColumnModel.Title}\" column has been updated", MatToastType.Success, "Update");
        }
        else
        {
            matToaster.Add($"The \"{ColumnModel.Title}\" column could not be updated", MatToastType.Danger, "Update");
        }

        IsOpenedSecondDialog = false;
        IsOpen = false;
        await OnSubmitCallback.InvokeAsync(this);
    }
}