@page "/card/create";
@inject HttpClient Http

<EditForm Model="@cardModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        @*<label for="card-title">Card Title</label>
        <input @bind="@cardModel.Title" type="text" class="form-control" id="card-title" />*@
        <p>
            <MatTextField Id="card-title" @bind-Value="@cardModel.Title" Label="Card Title" FullWidth="true"></MatTextField>
        </p>
    </div>

    <div class="form-group">
        @*<label for="card-description">Card Description</label>
        <input @bind="@cardModel.Description" type="text" class="form-control" id="card-description" />*@
        <p>
            <MatTextField Id="card-description" @bind-Value="@cardModel.Description" Label="Card Description" TextArea="true" FullWidth="true"></MatTextField>
        </p>
    </div>

    <MatButton Type="submit" Icon="@MatIconNames.Check">Submit</MatButton>
    <MatButton OnClick="Cancel" Icon="@MatIconNames.Cancel">Cancel</MatButton>

</EditForm>

@code  {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter] public string ColumnId { get; set; }

    private BlazorKanban.Shared.Card cardModel;

    protected override void OnInitialized()
    {
        cardModel = new BlazorKanban.Shared.Card();

        cardModel.ColumnId = ColumnId;
        cardModel.Id = ColumnId;
    }

    void SubmitForm()
    {
        BlazoredModal.Close(ModalResult.Ok($"Form was submitted successfully."));
    }

    void Cancel()
    {
        BlazoredModal.Cancel();
    }

    private async Task HandleValidSubmit()
    {
        var result = await Http.PostAsJsonAsync<BlazorKanban.Shared.Card>($"api/taskcards", cardModel);

        await BlazoredModal.Close(ModalResult.Ok<BlazorKanban.Shared.Card>(cardModel));

        this.StateHasChanged();
    }
}