@attribute [Authorize]
@page "/card/edit/{cardid}";
@inject HttpClient Http
@inject IMatToaster matToaster

<MatDialog @bind-IsOpen="@IsOpen">
    <EditForm Model="@CardModel" OnValidSubmit="SubmitForm">
        <MatDialogTitle>Edit card</MatDialogTitle>
        <p>
            <DataAnnotationsValidator />
            @*<ValidationSummary />*@
        </p>
        <MatDivider></MatDivider>
        <MatDialogContent>
            <p>
                <label for="card-title">card Title</label>
                <MatTextField Id="card-title" @bind-Value="@CardModel.Title" FullWidth="true"></MatTextField>
                <ValidationMessage For="@(() => CardModel.Title)" />
            </p>
            <p>
                <label for="card-description">card Description (optional)</label>
                <MatTextField Id="card-description" @bind-Value="@CardModel.Description" FullWidth="true" TextArea="true"></MatTextField>
            </p>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Type="button" Icon="delete_forever" OnClick="async () => await Delete(CardModel.Id)" Style="color:darkred; margin-right: auto;">Delete</MatButton>
            <MatButton Type="submit">Save</MatButton>
            <MatButton Type="button" OnClick="Close">Cancel</MatButton>
        </MatDialogActions>
    </EditForm>
</MatDialog>

@code  {
    [Parameter] public EventCallback OnSubmitCallback { get; set; }

    private BlazorKanban.Shared.Card CardModel { get; set; } = new Card();

    private bool IsOpen { get; set; } = false;

    public async Task Open(string cardId)
    {
        IsOpen = true;
        CardModel = await Http.GetFromJsonAsync<Card>($"api/taskcards/{cardId}");

        StateHasChanged();
    }

    private void Close()
    {
        IsOpen = false;

        StateHasChanged();
    }

    private async Task Delete(string cardId)
    {
        var response = await Http.DeleteAsync($"api/taskcards/{cardId}");
        response.EnsureSuccessStatusCode();

        if (response.IsSuccessStatusCode)
        {
            matToaster.Add($"The \"{CardModel.Title}\" card has been deleted", MatToastType.Warning, "Delete");
        }
        else
        {
            matToaster.Add($"The \"{CardModel.Title}\" card could not be deleted", MatToastType.Danger, "Delete");
        }

        IsOpen = false;
        await OnSubmitCallback.InvokeAsync(this);
    }

    private async Task SubmitForm()
    {
        var response = await Http.PutAsJsonAsync<BlazorKanban.Shared.Card>($"api/taskcards/{CardModel.Id}", CardModel);
        response.EnsureSuccessStatusCode();

        if (response.IsSuccessStatusCode)
        {
            matToaster.Add($"The \"{CardModel.Title}\" card has been updated", MatToastType.Success, "Update");
        }
        else
        {
            matToaster.Add($"The \"{CardModel.Title}\" card could not be updated", MatToastType.Danger, "Update");
        }

        IsOpen = false;
        await OnSubmitCallback.InvokeAsync(this);
    }
}