@page "/card/create";
@inject HttpClient Http

<EditForm Model="@cardModel" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="card-title">Card Title</label>
        <input @bind="@cardModel.Title" type="text" class="form-control" id="card-title" />
    </div>

    <div class="form-group">
        <label for="card-description">Card Description</label>
        <input @bind="@cardModel.Description" type="text" class="form-control" id="card-description" />
    </div>

    <button class="btn btn-primary">Submit</button>
    <button @onclick="Cancel" class="btn btn-secondary">Cancel</button>
</EditForm>

@code  {
    [CascadingParameter] BlazoredModalInstance BlazoredModal { get; set; }

    [Parameter] public string ColumnId { get; set; }

    private BlazorKanban.Shared.Card cardModel;

    protected override void OnInitialized()
    {
        cardModel = new BlazorKanban.Shared.Card();

        cardModel.ColumnId = ColumnId;
        cardModel.Id = ColumnId;
    }

    void SubmitForm()
    {
        BlazoredModal.Close(ModalResult.Ok($"Form was submitted successfully."));
    }

    void Cancel()
    {
        BlazoredModal.Cancel();
    }

    private async Task HandleValidSubmit()
    {
        var result = await Http.PostAsJsonAsync<BlazorKanban.Shared.Card>($"api/taskcards", cardModel);

        await BlazoredModal.Close(ModalResult.Ok<BlazorKanban.Shared.Card>(cardModel));

        this.StateHasChanged();
    }
}