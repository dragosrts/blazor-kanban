@attribute [Authorize]
@page "/board/create";
@inject HttpClient Http
@inject IMatToaster matToaster

<MatDialog @bind-IsOpen="@IsOpen">
    <EditForm Model="@BoardModel" OnValidSubmit="SubmitForm">
        <MatDialogTitle>Add new board</MatDialogTitle>
        <p>
            <DataAnnotationsValidator />
            @*<ValidationSummary />*@
        </p>
        <MatDivider></MatDivider>
        <MatDialogContent>
            <p>
                <label for="board-title">Board Title</label>
                <MatTextField Id="board-title" @bind-Value="@BoardModel.Title" FullWidth="true"></MatTextField>
                <ValidationMessage For="@(() => BoardModel.Title)" />
            </p>
            <p>
                <label for="board-description">Board Description (optional)</label>
                <MatTextField Id="board-description" @bind-Value="@BoardModel.Description" FullWidth="true" TextArea="true"></MatTextField>
            </p>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton Type="submit">Save</MatButton>
            <MatButton Type="button" OnClick="Close">Cancel</MatButton>
        </MatDialogActions>
    </EditForm>
</MatDialog>

@code  {
    [Parameter] public string UserId { get; set; }

    [Parameter] public EventCallback OnSubmitCallback { get; set; }

    private BlazorKanban.Shared.Board BoardModel { get; set; } = new Board();

    private bool IsOpen { get; set; } = false;

    protected override void OnInitialized()
    {
        BoardModel = new BlazorKanban.Shared.Board();

        BoardModel.UserId = UserId;
    }

    public void Open()
    {
        IsOpen = true;

        BoardModel = new BlazorKanban.Shared.Board();

        StateHasChanged();
    }

    void Close()
    {
        IsOpen = false;

        BoardModel = new BlazorKanban.Shared.Board();
    }

    private async Task SubmitForm()
    {
        BoardModel.UserId = UserId;

        var response = await Http.PostAsJsonAsync<BlazorKanban.Shared.Board>($"api/taskboards", BoardModel);
        response.EnsureSuccessStatusCode();

        if (response.IsSuccessStatusCode)
        {
            matToaster.Add($"The \"{BoardModel.Title}\" board has been created", MatToastType.Success, "Create");
        }
        else
        {
            matToaster.Add($"The \"{BoardModel.Title}\" board could not be created", MatToastType.Danger, "Create");
        }

        IsOpen = false;
        BoardModel = new BlazorKanban.Shared.Board();
        await OnSubmitCallback.InvokeAsync(this);
    }
}