@attribute [Authorize]
@page "/{UserId}/boards/"
@inject HttpClient Http
@inject NavigationManager NavigationManager

@if (boards == null)
{
    <Loading />
}
else
{
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner row flex-row flex-sm">
            @foreach (var board in boards)
            {
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                    <MatCard Id="@board.Id" Class="board-block item-boundaries">
                        <MatCardContent Class="p-3" @onclick="() => GoToBoard(board.Id)">
                            <MatHeadline6>
                                @board.Title
                            </MatHeadline6>
                            <MatBody2>
                                @board.Description
                            </MatBody2>
                        </MatCardContent>
                        <MatCardActions>
                            <MatCardActionButtons>
                                <MatButton Icon="@MatIconNames.Edit" OnClick="async () => await BoardEditModal.Open(board.Id)">Edit</MatButton>
                            </MatCardActionButtons>
                        </MatCardActions>
                    </MatCard>
                </div>
            }
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-6">
                <MatButton Icon="@MatIconNames.Add" Class="board-block item-boundaries" OnClick="() => BoardCreateModal.Open()">&nbsp; Add Board</MatButton>
            </div>

            <BoardCreate @ref="BoardCreateModal" UserId="@UserId" OnSubmitCallback="Reload"></BoardCreate>

            <BoardEdit @ref="BoardEditModal" OnSubmitCallback="Reload"></BoardEdit>
        </div>
    </div>
}

@code {
    [Parameter] public string UserId { get; set; }

    private Board[] boards;

    private BoardCreate BoardCreateModal;
    private BoardEdit BoardEditModal;

    protected override async Task OnInitializedAsync()
    {
        boards = await Http.GetFromJsonAsync<Board[]>($"api/taskboards/{UserId}/boards");
    }

    private void GoToBoard(string id)
    {
        NavigationManager.NavigateTo($"board/{id}");
    }

    private async Task Reload()
    {
        boards = await Http.GetFromJsonAsync<Board[]>($"api/taskboards/{UserId}/boards");

        StateHasChanged();
    }
}