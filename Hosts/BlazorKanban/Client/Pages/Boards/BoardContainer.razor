@attribute [Authorize]
@page "/board/{boardid}"
@inject HttpClient Http
@using BlazorKanban.Client.Pages.Columns
@inject IMatToaster matToaster

@if (BoardModel == null)
{
    <Loading />
}
else
{
    <div class="mx-5 px-5 py-2">
        <MatHeadline3>@BoardModel.Title</MatHeadline3>
        <MatSubtitle2>@BoardModel.Description</MatSubtitle2>
    </div>
    <MatDivider></MatDivider>

    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner row flex-row flex-sm-nowrap">
            @foreach (var column in BoardModel.Columns)
            {
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                    <CascadingValue Value="column">
                        <ColumnContainer Class="column-block item-boundaries"
                                         OnEditCallback="async () => await EditColumn(column.Id)"
                                         OnSubmitCallback="Reload" />
                    </CascadingValue>
                </div>
            }
            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-3">
                <MatButton Outlined="true" Dense="true"
                           Icon="@MatIconNames.View_column"
                           Class="column-block item-boundaries"
                           OnClick="async () => await AddColumn()">&nbsp; Add Column</MatButton>
            </div>
        </div>
    </div>
    <ColumnCreate @ref="ColumnCreateModal" BoardId="@BoardId" OnSubmitCallback="Reload"></ColumnCreate>
    <ColumnEdit @ref="ColumnEditModal" OnSubmitCallback="Reload"></ColumnEdit>
}

@code {
    [Parameter] public string BoardId { get; set; }

    private Board BoardModel { get; set; }

    private ColumnCreate ColumnCreateModal { get; set; }
    private ColumnEdit ColumnEditModal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        BoardModel = await Http.GetFromJsonAsync<Board>($"api/taskboards/{BoardId}");

        StateHasChanged();
    }

    private async Task AddColumn()
    {
        ColumnCreateModal.Open();
    }

    private async Task EditColumn(string id)
    {
        await ColumnEditModal.Open(id);
    }

    private async Task Reload()
    {
        BoardModel = await Http.GetFromJsonAsync<Board>($"api/taskboards/{BoardId}");

        matToaster.Add($"The \"{BoardModel.Title}\" board has been updated", MatToastType.Primary);

        StateHasChanged();
    }
}